from fastapi import FastAPI, UploadFile, File, Form, HTTPException, Depends, status
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from db import engine, SessionLocal
from models import Base, RFP, User
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import BaseModel, EmailStr
import shutil
from pathlib import Path
import pdfplumber
import os
from openai import OpenAI
from datetime import date, datetime, timedelta
from passlib.context import CryptContext
from jose import JWTError, jwt

app = FastAPI()

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://govcon.taptasky.com"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Upload folder
UPLOAD_DIR = Path(__file__).resolve().parent / "uploads"
UPLOAD_DIR.mkdir(exist_ok=True)

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

# JWT settings
SECRET_KEY = os.getenv("JWT_SECRET", "supersecretkey")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# Dependency to get DB session
async def get_db():
    async with SessionLocal() as session:
        yield session

@app.on_event("startup")
async def startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# ---------------------- AUTH ------------------------

class UserCreate(BaseModel):
    email: EmailStr
    password: str

@app.post("/register")
async def register_user(user: UserCreate, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).where(User.email == user.email))
    existing_user = result.scalar_one_or_none()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered"
        )

    new_user = User(
        email=user.email,
        hashed_password=hash_password(user.password)
    )
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    return {"id": new_user.id, "email": new_user.email}

@app.post("/login")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(User).where(User.email == form_data.username))
    user = result.scalar_one_or_none()

    if not user or not pwd_context.verify(form_data.password, user.hashed_password):
        raise HTTPException(status_code=400, detail="Invalid email or password")

    access_token = create_access_token(data={"sub": user.email})
    return {"access_token": access_token, "token_type": "bearer"}

# ---------------------- RFP ROUTES ------------------------

@app.post("/upload-rfp")
async def upload_rfp(title: str = Form(...), file: UploadFile = File(...)):
    file_location = UPLOAD_DIR / file.filename
    with open(file_location, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    async with SessionLocal() as session:
        rfp = RFP(title=title, filename=file.filename, submission_date=date.today())
        session.add(rfp)
        await session.commit()

    return {"message": f"RFP '{title}' uploaded successfully."}

@app.get("/rfps")
async def get_rfps():
    async with SessionLocal() as session:
        result = await session.execute(select(RFP))
        return result.scalars().all()

@app.get("/rfp/{rfp_id}")
async def get_rfp(rfp_id: int):
    async with SessionLocal() as session:
        rfp = await session.get(RFP, rfp_id)
        if not rfp:
            raise HTTPException(status_code=404, detail="RFP not found")
        return {
            "id": rfp.id,
            "title": rfp.title,
            "filename": rfp.filename,
            "draft_text": rfp.draft_text,
            "company_name": rfp.company_name,
            "document_type": rfp.document_type,
            "submission_date": rfp.submission_date.isoformat() if rfp.submission_date else None,
        }

@app.post("/generate-draft/{rfp_id}")
async def generate_draft(rfp_id: int):
    async with SessionLocal() as session:
        rfp = await session.get(RFP, rfp_id)
        if not rfp:
            raise HTTPException(status_code=404, detail="RFP not found")

    pdf_path = UPLOAD_DIR / rfp.filename
    if not pdf_path.exists():
        raise HTTPException(status_code=404, detail="RFP file not found")

    with pdfplumber.open(pdf_path) as pdf:
        full_text = "\n".join(page.extract_text() or "" for page in pdf.pages)

    prompt = f"""You are a government proposal writer. Based on the RFP text below, generate a high-level executive summary or introduction for a proposal.

RFP TEXT:
{full_text[:4000]}"""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a proposal writer."},
                {"role": "user", "content": prompt}
            ]
        )
        draft_text = response.choices[0].message.content
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

    async with SessionLocal() as session:
        rfp = await session.get(RFP, rfp_id)
        rfp.draft_text = draft_text
        await session.commit()

    return {
        "rfp_id": rfp_id,
        "title": rfp.title,
        "draft": draft_text
    }

class RFPUpdate(BaseModel):
    draft_text: str
    company_name: str
    document_type: str
    submission_date: str  # ISO format

@app.put("/rfp/{rfp_id}")
async def update_rfp(rfp_id: int, update: RFPUpdate):
    async with SessionLocal() as session:
        rfp = await session.get(RFP, rfp_id)
        if not rfp:
            raise HTTPException(status_code=404, detail="RFP not found")

        rfp.draft_text = update.draft_text
        rfp.company_name = update.company_name
        rfp.document_type = update.document_type
        rfp.submission_date = update.submission_date
        await session.commit()

    return {"message": "Draft updated successfully", "rfp_id": rfp_id}

